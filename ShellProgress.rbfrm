#tag WindowBegin ContainerControl ShellProgress   AcceptFocus     =   False   AcceptTabs      =   True   AutoDeactivate  =   True   BackColor       =   &cFFFFFF00   Backdrop        =   0   DoubleBuffer    =   False   Enabled         =   True   EraseBackground =   True   HasBackColor    =   False   Height          =   192   HelpTag         =   ""   InitialParent   =   ""   Left            =   32   LockBottom      =   False   LockLeft        =   False   LockRight       =   False   LockTop         =   False   TabIndex        =   0   TabPanelIndex   =   0   TabStop         =   True   Top             =   32   Transparent     =   True   UseFocusRing    =   False   Visible         =   True   Width           =   367   Begin Label Label1      AutoDeactivate  =   True      Bold            =   False      DataField       =   ""      DataSource      =   ""      Enabled         =   True      Height          =   20      HelpTag         =   ""      Index           =   -2147483648      InitialParent   =   ""      Italic          =   False      Left            =   0      LockBottom      =   False      LockedInPosition=   False      LockLeft        =   True      LockRight       =   True      LockTop         =   True      Multiline       =   False      Scope           =   2      Selectable      =   False      TabIndex        =   0      TabPanelIndex   =   0      TabStop         =   True      Text            =   ""      TextAlign       =   0      TextColor       =   &c00000000      TextFont        =   "System"      TextSize        =   0.0      TextUnit        =   0      Top             =   0      Transparent     =   False      Underline       =   False      Visible         =   True      Width           =   367   End   Begin TextArea ConsoleText      AcceptTabs      =   False      Alignment       =   0      AutoDeactivate  =   True      AutomaticallyCheckSpelling=   False      BackColor       =   &cFFFFFF00      Bold            =   False      Border          =   True      DataField       =   ""      DataSource      =   ""      Enabled         =   True      Format          =   ""      Height          =   140      HelpTag         =   ""      HideSelection   =   True      Index           =   -2147483648      Italic          =   False      Left            =   0      LimitText       =   0      LineHeight      =   0.0      LineSpacing     =   1.0      LockBottom      =   True      LockedInPosition=   False      LockLeft        =   True      LockRight       =   True      LockTop         =   True      Mask            =   ""      Multiline       =   True      ReadOnly        =   True      Scope           =   0      ScrollbarHorizontal=   True      ScrollbarVertical=   True      Styled          =   False      TabIndex        =   3      TabPanelIndex   =   0      TabStop         =   True      Text            =   ""      TextColor       =   &c00000000      TextFont        =   "System"      TextSize        =   0.0      TextUnit        =   0      Top             =   51      Transparent     =   True      Underline       =   False      UseFocusRing    =   False      Visible         =   False      Width           =   367   End   Begin DisclosureTriangle DisclosureTriangle1      AcceptFocus     =   False      AutoDeactivate  =   True      Enabled         =   True      Facing          =   0      Height          =   20      HelpTag         =   "Toggle console visibility"      Index           =   -2147483648      InitialParent   =   ""      Left            =   0      LockBottom      =   False      LockedInPosition=   False      LockLeft        =   True      LockRight       =   False      LockTop         =   True      Scope           =   2      TabIndex        =   4      TabPanelIndex   =   0      TabStop         =   True      Top             =   19      Transparent     =   True      Value           =   False      Visible         =   True      Width           =   18   End   Begin Timer Timer1      Index           =   -2147483648      InitialParent   =   ""      LockedInPosition=   False      Mode            =   0      Period          =   250      Scope           =   2      TabPanelIndex   =   0   End   Begin ProgressBar ProgressBar1      AutoDeactivate  =   True      Enabled         =   True      Height          =   20      HelpTag         =   ""      Indeterminate   =   False      Index           =   -2147483648      InitialParent   =   ""      Left            =   20      LockBottom      =   False      LockedInPosition=   False      LockLeft        =   True      LockRight       =   True      LockTop         =   True      Maximum         =   150      Scope           =   2      TabIndex        =   4      TabPanelIndex   =   0      Top             =   20      Transparent     =   True      Value           =   1.0      Visible         =   True      Width           =   345   End   Begin Shell Shell1      Arguments       =   ""      Backend         =   ""      Canonical       =   False      ErrorCode       =   0      Index           =   -2147483648      InitialParent   =   ""      IsRunning       =   False      LockedInPosition=   False      Mode            =   2      PID             =   0      Result          =   ""      Scope           =   2      TabPanelIndex   =   0      TimeOut         =   -1   EndEnd#tag EndWindow#tag WindowCode	#tag Event		Sub Open()		  // Correct for Windows		  #If TargetWin32		    DisclosureTriangle1.Top = DisclosureTriangle1.Top + 2		  #EndIf		  State = COMPLETED		  		  // Default estimated time for operations (this influences our progress bar creeping)		  Seconds = 120		  		  // Default shortcode handler		  Me.jsonShortCodes = New JSONItem		  		  		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub Add(sType As String, Optional sCmd As String = "", Optional vState As Variant = "[completed]")		  // Add a command to our queue		  		  // Variant in Windows can be "" and never default, check explicitly for ""		  If vState = "" Then vState = "[completed]"		  		  CmdTypes.Insert(0,sType)		  CommandStates.Insert(0,vState)		  Commands.Insert(0,sCmd)		  Timer1.Mode = Timer.ModeOff		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Clear()		  // Clear all our commands from our queue & console		  Timer1.Mode = Timer.ModeOff		  ReDim Commands(-1)		  ReDim CmdTypes(-1)		  ConsoleText.Text = ""		  Stop()		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub FinishNow()		  Dim c As Integer = ProgressBar1.Value		  For f As Integer = c To ProgressBar1.Maximum		    If ProgressBar1.Value <= f Then		      ProgressBar1.Value = f		      App.DoEvents(1)		    End If		  Next		  ProgressBar1.Value = ProgressBar1.Maximum		  		  // Stop as we're finished with all commands		  Stop()		  sResult = sResult + "[finished]" + Chr(13)		  ConsoleText.SelText = "[finished]" + Chr(13)		  RaiseEvent Finished		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function IsRunning() As Boolean		  // Return the state of the shell		  Return Timer1.Mode <> Timer.ModeOff		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Start()		  // Start processing our command queue		  Timer1.Mode = Timer.ModeMultiple		  nMilliTimeout = Timeout * 1000		  Shell1.TimeOut = nMilliTimeout		  ProgressBar1.Value = 0		  Segments = CmdTypes.Ubound() + 1		  ConsoleText.SelText = "[start]" + Chr(13)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Stop()		  // Stop processing our command queue		  Timer1.Mode = Timer.ModeOff		  		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event Aborted()	#tag EndHook	#tag Hook, Flags = &h0		Event Finished()	#tag EndHook	#tag Hook, Flags = &h0		Event Timeout()	#tag EndHook	#tag Property, Flags = &h1		Protected CmdTypes() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Commands() As String	#tag EndProperty	#tag Property, Flags = &h0		CommandStates() As Variant	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #If  TargetMacOS			    return DisclosureTriangle1.Value			  #Else			    return Not DisclosureTriangle1.Value			  #Endif			  			End Get		#tag EndGetter		#tag Setter			Set			  #If  TargetMacOS			    DisclosureTriangle1.Value = value			    ConsoleText.Visible = value			  #Else			    DisclosureTriangle1.Value = Not value			    ConsoleText.Visible = value			  #Endif			  			End Set		#tag EndSetter		Console As Boolean	#tag EndComputedProperty	#tag Property, Flags = &h0		jsonShortCodes As JSONItem	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			// Milliseconds until a command timesout causing a Timeout event		#tag EndNote		nMilliTimeout As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private nSecs As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private Past As Integer	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			The estimated number of seconds the entire process queue will run.		#tag EndNote		Seconds As Integer	#tag EndProperty	#tag Property, Flags = &h0		Segments As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private sResult As String	#tag EndProperty	#tag Property, Flags = &h1		Protected State As Integer	#tag EndProperty	#tag Property, Flags = &h0		sType As String	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			// Maximum number of milliseconds to wait on a given command		#tag EndNote		Timeout As Integer = 60	#tag EndProperty	#tag Property, Flags = &h0		vLastCmdState As Variant	#tag EndProperty	#tag Constant, Name = BUSY, Type = Double, Dynamic = False, Default = \"0", Scope = Protected	#tag EndConstant	#tag Constant, Name = COMPLETED, Type = Double, Dynamic = False, Default = \"2", Scope = Protected	#tag EndConstant	#tag Constant, Name = WAITING, Type = Double, Dynamic = False, Default = \"1", Scope = Protected	#tag EndConstant#tag EndWindowCode#tag Events ConsoleText	#tag Event		Sub KeyUp(Key As String)		  // Support copy, cut & paste		  #If TargetMacOS Then		    If Keyboard.CommandKey Then		      Dim c As New Clipboard		      If Key = "x" Or Key = "c" Then		        c.SetText Me.Text.Mid(Me.SelStart + 1, Me.SelLength)		        c.Close		        If Not Me.ReadOnly And Key = "x" Then		          Dim nStart As Integer = Me.SelStart		          Me.Text = Me.Text.Mid(0, Me.SelStart + 1) + Me.Text.Mid(Me.SelStart + Me.SelLength + 1,Me.Text.Len())		          Me.SelStart = nStart		          Me.SelLength = 0		        End If		      End If		      If Not Me.ReadOnly And Key = "v" Then		        If c.TextAvailable() Then		          Dim nStart As Integer = Me.SelStart		          Me.Text = Me.Text.Mid(0, Me.SelStart + 1) + c.Text + Me.Text.Mid(Me.SelStart + Me.SelLength + 1,Me.Text.Len())		          Me.SelStart = nStart + c.Text.Len()		          Me.SelLength = 0		        End If		      End If		    End If		  #EndIf		End Sub	#tag EndEvent#tag EndEvents#tag Events DisclosureTriangle1	#tag Event		Sub Action()		  #If TargetMacOS		    ConsoleText.Visible = DisclosureTriangle1.Value		  #Else		    ConsoleText.Visible = Not DisclosureTriangle1.Value		  #Endif		  		End Sub	#tag EndEvent#tag EndEvents#tag Events Timer1	#tag Event		Sub Action()		  Me.Enabled = False  // Prevent Windows async		  		  // Update the progress bar		  Dim c As Integer = ((1 - ((CmdTypes.Ubound()+1) / Segments))  - (1 / Segments)) * ProgressBar1.Maximum		  Dim f As Integer		  Dim s As Integer		  If c < 0 Then c = 0		  s = ProgressBar1.Value		  For f = s To c		    If ProgressBar1.Value <= f Then		      ProgressBar1.Value = f		      App.DoEvents(1)		    Else		      Exit For		    End If		  Next		  		  // Creep progress bar		  Dim Current As Integer = Segments - (CmdTypes.UBound() + 1)		  If ProgressBar1.Value < (Current / Segments) * (ProgressBar1.Maximum * .99) Then		    Dim Now As New Date		    If Past <> Now.Second Then		      Past = Now.Second		      nSecs = nSecs + 1		      		      // Calculate total creep per segment		      If nSecs < (Seconds / Segments) Then		        c = ProgressBar1.Value + ((ProgressBar1.Maximum / Segments) / (Seconds / Segments))		        s = ProgressBar1.Value		        For f = s To c		          If ProgressBar1.Value <= f And c < (ProgressBar1.Maximum * .99) Then		            ProgressBar1.Value = f		            App.DoEvents(25)		          Else		            Exit For		          End If		        Next		      Else		        nSecs = 0		      End If		    End If		  End If		  		  // Wait based on last command state request		  If vLastCmdState.StringValue <> "" Then		    If IsNumeric(vLastCmdState) Then		      vLastCmdState = vLastCmdState.IntegerValue - Me.Period		      If vLastCmdState > 0 Then		        nMilliTimeout = Timeout * 1000		        Me.Enabled = True		        Exit Sub		      End If		    Else		      		      // Wait if substring specified or timeout		      If nMilliTimeout <= 0 Then		        RaiseEvent Timeout		      Else		        		        // Check for substring or [completed]		        If sResult.InStr("[completed]") = 0 And sResult.InStr(vLastCmdState.StringValue) = 0 Then		          Me.Enabled = True		          Exit Sub		        Else		          // Reset timeout and continue to process next command		          nMilliTimeout = Timeout * 1000		        End If		      End If		    End If		  End If		  		  // Check for ifshell and remove block if substring not found		  If sType = "ifshell" Then		    If sResult.InStr(vLastCmdState.StringValue) = 0 Then		      While CmdTypes.Ubound() > -1		        Call CommandStates.Pop()		        Call Commands.Pop()		        If CmdTypes.Pop() = "endshell" Then Exit		      Wend		    End If		  End If		  		  // Process commands when input is ready		  If State <> BUSY And CmdTypes.Ubound() > -1 Then		    		    // Grab a command		    sType = CmdTypes.Pop()		    Dim sCmd As String =  Commands.Pop()		    		    // Replace the given strings shortcodes if present		    For Each sName As String In jsonShortCodes.Names		      sCmd = ReplaceAll(sCmd, "[" + sName + "]", jsonShortCodes.Value(sName))		    Next		    		    vLastCmdState = CommandStates.Pop()		    Select Case sType		    Case "abort"		      ReDim CmdTypes(-1)		      ReDim Commands(-1)		      ReDim CommandStates(-1)		      Shell1.Execute("")		      RaiseEvent Aborted		      		    Case "ask"		      If MsgBox(sCmd, 36) = 7 Then 		        		        // If no, ignore block		        While CmdTypes.Ubound() > -1		          Call CommandStates.Pop()		          Call Commands.Pop()		          If CmdTypes.Pop() = "endask" Then		            Exit		          End If		        Wend		      End If		      State = COMPLETED		      vLastCmdState = ""		      sCmd = ""		      		    Case "retry"		      If MsgBox(sCmd, 37) = 2 Then		        		        // If no, ignore block		        While CmdTypes.Ubound() > -1		          Call CommandStates.Pop()		          Call Commands.Pop()		          If CmdTypes.Pop() = "endretry" Then		            Exit		          End If		        Wend		      End If		      State = COMPLETED		      vLastCmdState = ""		      sCmd = ""		      		    Case "wait"		      vLastCmdState = Val(sCmd) * 1000		      State = COMPLETED		      sCmd = ""		      		    Case "caption"		      Label1.Text = sCmd		      State = COMPLETED		      vLastCmdState = ""		      sCmd = ""		      		    Case "endshell", "endask", "endretry"		      State = COMPLETED		      vLastCmdState = ""		      sCmd = ""		      		    Case "messagebox"		      If CmdTypes.Ubound() <> -1 Then		        State = COMPLETED		        vLastCmdState = ""		        		      Else		        ProgressBar1.Value = ProgressBar1.Maximum		      End If		      Dim mBox As New MessageDialog 		      mBox.Icon = MessageDialog.GraphicNote		      mBox.Message = sCmd		      Call mBox.ShowModal		      sCmd = ""		      		    Case "shell", "ifshell"		      If IsNumeric(vLastCmdState) Then vLastCmdState = vLastCmdState * 1000		      ConsoleText.SelText = sCmd + Chr(13)		      sResult = ""		      If State = COMPLETED Then		        Shell1.Execute(sCmd)		      Else		        Shell1.WriteLine(sCmd)		      End If		      State = BUSY		      		    Case Else		      Dim mBox As New MessageDialog		      mBox.Icon = MessageDialog.GraphicCaution		      mBox.Message = "Error - Unrecognized command " + sType		      Call mBox.ShowModal		      State = COMPLETED		      vLastCmdState = ""		      sCmd = ""		    End Select		    		    // Finish out last command		    If CmdTypes.Ubound() = -1 Then		      FinishNow		    End If		  End If		  Me.Enabled = True		  		End Sub	#tag EndEvent#tag EndEvents#tag Events Shell1	#tag Event		Sub Completed()		  Dim sPrompt As String = Me.ReadAll		  sResult = sResult + sPrompt + "[completed]" + Chr(13)		  ConsoleText.SelText = sPrompt + "[completed]" + Chr(13)		  State = COMPLETED		  		  // Finish off progress bar if we have no more commands		  If CmdTypes.Ubound() = -1 Then		    FinishNow		  End If		  		End Sub	#tag EndEvent	#tag Event		Sub DataAvailable()		  Dim sPrompt As String = Me.ReadAll		  If sPrompt.Trim <> "" Then		    sResult = sResult + sPrompt + "[waiting]" + Chr(13)		    ConsoleText.SelText = sPrompt + "[waiting]" + Chr(13)		    State = WAITING		  End If		End Sub	#tag EndEvent#tag EndEvents#tag ViewBehavior	#tag ViewProperty		Name="AllowAutoDeactivate"		Visible=true		Group="Appearance"		InitialValue="True"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Tooltip"		Visible=true		Group="Appearance"		InitialValue=""		Type="String"		EditorType="MultiLineEditor"	#tag EndViewProperty	#tag ViewProperty		Name="AllowFocusRing"		Visible=true		Group="Appearance"		InitialValue="False"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="BackgroundColor"		Visible=true		Group="Background"		InitialValue="&hFFFFFF"		Type="Color"		EditorType="Color"	#tag EndViewProperty	#tag ViewProperty		Name="HasBackgroundColor"		Visible=true		Group="Background"		InitialValue="False"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="AllowFocus"		Visible=true		Group="Behavior"		InitialValue="False"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="AllowTabs"		Visible=true		Group="Behavior"		InitialValue="True"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="DoubleBuffer"		Visible=true		Group="Windows Behavior"		InitialValue="False"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Backdrop"		Visible=true		Group="Background"		InitialValue=""		Type="Picture"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Console"		Visible=false		Group="Behavior"		InitialValue=""		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Enabled"		Visible=true		Group="Appearance"		InitialValue="True"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="EraseBackground"		Visible=true		Group="Behavior"		InitialValue="True"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Height"		Visible=true		Group="Size"		InitialValue="300"		Type="Integer"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="InitialParent"		Visible=false		Group="Position"		InitialValue=""		Type="String"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Left"		Visible=true		Group="Position"		InitialValue=""		Type="Integer"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="LockBottom"		Visible=true		Group="Position"		InitialValue=""		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="LockLeft"		Visible=true		Group="Position"		InitialValue=""		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="LockRight"		Visible=true		Group="Position"		InitialValue=""		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="LockTop"		Visible=true		Group="Position"		InitialValue=""		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Name"		Visible=true		Group="ID"		InitialValue=""		Type="String"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="nMilliTimeout"		Visible=false		Group="Behavior"		InitialValue=""		Type="Integer"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Seconds"		Visible=false		Group="Behavior"		InitialValue=""		Type="Integer"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Segments"		Visible=false		Group="Behavior"		InitialValue=""		Type="Integer"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="sType"		Visible=false		Group="Behavior"		InitialValue=""		Type="String"		EditorType="MultiLineEditor"	#tag EndViewProperty	#tag ViewProperty		Name="Super"		Visible=true		Group="ID"		InitialValue=""		Type="String"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="TabIndex"		Visible=true		Group="Position"		InitialValue="0"		Type="Integer"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="TabPanelIndex"		Visible=false		Group="Position"		InitialValue="0"		Type="Integer"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="TabStop"		Visible=true		Group="Position"		InitialValue="True"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Timeout"		Visible=false		Group="Behavior"		InitialValue="60"		Type="Integer"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Top"		Visible=true		Group="Position"		InitialValue=""		Type="Integer"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Transparent"		Visible=true		Group="Behavior"		InitialValue="True"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Visible"		Visible=true		Group="Appearance"		InitialValue="True"		Type="Boolean"		EditorType=""	#tag EndViewProperty	#tag ViewProperty		Name="Width"		Visible=true		Group="Size"		InitialValue="300"		Type="Integer"		EditorType=""	#tag EndViewProperty#tag EndViewBehavior